# -*- coding: utf-8 -*-
"""Kelompok5_Dm.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14rsOqEh1P8fCnoN_5DDW2A5jaXrUePTm
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn import metrics
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.ensemble import RandomForestRegressor

# Mengakses google drive ke dalam google colaboratory
from google.colab import drive
drive.mount('/content/gdrive')
import os

#Inisiasi directory tempat data akan dibaca dan disimpan
path = "gdrive/MyDrive/dataset/"
df = pd.read_csv(path+'train.csv')
df



df.isnull().sum()

df.info()

plt.figure(figsize=(12, 8))
sns.heatmap(df.corr(), annot=True, cmap='coolwarm', fmt='.2f')
plt.title('Correlation Matrix')
plt.show()

# Menghitung korelasi antara fitur dan target
correlations = df.corr()['price_range'].abs().sort_values(ascending=False)

# Menampilkan fitur dengan korelasi tertinggi
top_features = correlations.index[1:]  # Exclude 'price_range' itself
print("Fitur dengan Korelasi Tertinggi:")
print(correlations[1:])

# Memilih sejumlah fitur tertinggi (misalnya, 5 fitur teratas)
selected_features = top_features[:5]
print("\nFitur yang Dipilih:")
print(selected_features)

# Memilih fitur dengan korelasi tertinggi
selected_features = ['ram', 'battery_power', 'px_width', 'px_height', 'int_memory', 'sc_w', 'pc', 'touch_screen', 'mobile_wt', 'three_g']

# Memisahkan fitur (X) dan target (y)
X = df[selected_features]
y = df['price_range']

# Membagi data menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Membuat model Random Forest Regressor
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f'Mean Squared Error: {mse}')
print(f'R-squared: {r2}')

# Menampilkan Feature Importances
feature_importances = model.feature_importances_
print('Feature Importances:')
for feature, coef in zip(selected_features, feature_importances):
    print(f'{feature}: {coef}')

# Korelasi Fitur dengan Rentang Harga
plt.figure(figsize=(10, 6))
barplot = sns.barplot(x=feature_importances, y=selected_features)
plt.xlabel('Feature Importances')
plt.ylabel('Features')
plt.title('Feature Importances for Price Range')

# Menambahkan anotasi nilai pada setiap bar
for i, value in enumerate(feature_importances):
    barplot.text(value, i, f'{value:.4f}', ha='left', va='center')

plt.show()